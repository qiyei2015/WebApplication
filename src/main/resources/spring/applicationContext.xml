<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置包自动扫描路径-->
    <context:component-scan base-package="com.qiyei"/>

    <bean id="userService" class="com.qiyei.springdemo.demo1.UserServiceImpl">
        <property name="name" value="张三"/>
    </bean>

    <!--Bean的实例化的三种方式============================-->
    <!--第一种：无参构造器的方式-->
    <bean id="bean1" class="com.qiyei.springdemo.demo2.Bean1"/>
    <!--第二种：静态工厂的方式-->
    <bean id="bean2" class="com.qiyei.springdemo.demo2.Bean2Factory" factory-method="createBean2"/>
    <!--第三种：实例工厂的方式-->
    <bean id="bean3Factory" class="com.qiyei.springdemo.demo2.Bean3Factory"/>
    <bean id="bean3" factory-bean="bean3Factory" factory-method="createBean3"/>

    <!--Bean的作用范围=====================================-->
    <bean id="person" class="com.qiyei.springdemo.demo3.Person" scope="prototype"/>

    <!--Bean的生命周期=====================================-->
    <bean id="man" class="com.qiyei.springdemo.demo3.Man"/>

    <!--Bean的生命周期中拦截方法=====================================-->
    <bean id="MyBeanPostProcessor" class="com.qiyei.springdemo.demo3.MyBeanPostProcessor"/>
    <bean id="userDao" class="com.qiyei.springdemo.demo3.UserDaoImpl"/>

    <!--配置数据库-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/web_application?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8"/>
        <property name="username" value="root"/>
        <property name="password" value="510726"/>
    </bean>
    <!--配置jdbcTemplate-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>
    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--声明Dao-->
    <bean id="bookDao" class="com.qiyei.springtransaction.dao.BookDaoImpl">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 1、通过事务通知的模式实现事务  事务通知：the transactional advice (what 'happens'; see the <aop:advisor/> bean below-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- 以find开头的所有方法都为只读事务：all methods starting with 'get' are read-only -->
            <tx:method name="find*" read-only="true"/>
            <!-- 其它方法使用默认事务设置：other methods use the default transaction settings (see below) -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <!-- 确保上述事务通知对定义在Dao接口中的方法都起作用( ensure that the above transactional advice runs for any execution of an operation defined by the FooService interface) -->
    <aop:config>
        <aop:pointcut id="bookDaoOperation" expression="execution(* com.qiyei.springtransaction.dao.BookDao.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="bookDaoOperation"/>
    </aop:config>

</beans>